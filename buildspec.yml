version: 0.2

env:
  parameter-store:
    AWS_REGION: "/buet/hackathon/aws-region"
    ECR_REPOSITORY_URL: "/buet/hackathon/ecr-repo-url"
    VERSION: "/buet/hackathon/version"
    K8S_CLUSTER_NAME: "/buet/hackathon/k8s-cluster-name"
    K8S_NAMESPACE: "/buet/hackathon/k8s-namespace"
    REGISTRATION_SERVER_URL: "/buet/hackathon/registration-server-url"
    SECRET_KEY: "/buet/hackathon/secret-key"
    DJANGO_SUPERUSER_USERNAME: "/buet/hackathon/django-superuser-username"
    DJANGO_SUPERUSER_EMAIL: "/buet/hackathon/django-superuser-email"
    DJANGO_SUPERUSER_PASSWORD: "/buet/hackathon/django-superuser-password"
    STUDENT_SERVICE_DB_SETTINGS: "/buet/hackathon/student-service-db-settings"
    COURSE_SERVICE_DB_SETTINGS: "/buet/hackathon/course-service-db-settings"
    DOCKER_USERNAME: "/buet/hackathon/docker-hub-username"
    DOCKER_PASSWORD: "/buet/hackathon/docker-hub-password"

phases:
  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - chmod +x eks_cicd/prereqs.sh
      - sh eks_cicd/prereqs.sh

  pre_build:
    commands:
      - echo Logging in to Docker Hub...
      - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
      - echo Logging in to Amazon ECR...
      - echo $AWS_REGION $ECR_REPOSITORY_URL
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL

  build:
    commands:
      - echo Building Docker image for Course Service...
      - docker build -t student ./registration
      - docker tag student:latest $ECR_REPOSITORY_URL/student:latest
      - docker push $ECR_REPOSITORY_URL/student:latest

      - echo Building Docker image for Student Service...
      - docker build -t course ./course
      - docker tag course:latest $ECR_REPOSITORY_URL/course:latest
      - docker push $ECR_REPOSITORY_URL/course:latest

  post_build:
    commands:
      - echo All services have been built and pushed to ECR.
      - mkdir tmp

      - echo Getting application settings in tmp directory...
      - echo "SECRET_KEY=$SECRET_KEY" > ./tmp/course.env
      - echo "REGISTRATION_SERVER_URL=$REGISTRATION_SERVER_URL" >> ./tmp/course.env

      - echo Getting application settings in tmp directory...
      - echo "SECRET_KEY=$SECRET_KEY" > ./tmp/student.env
      - echo "DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_USERNAME" > ./tmp/student.env
      - echo "DJANGO_SUPERUSER_EMAIL=$DJANGO_SUPERUSER_EMAIL" > ./tmp/student.env
      - echo "DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD" > ./tmp/student.env

      - echo "Contents of course.env:"
      - cat ./tmp/course.env
      - echo "Contents of student.env:"
      - cat ./tmp/student.env

      - echo Getting database settings in tmp directory...
      - echo $COURSE_SERVICE_DB_SETTINGS > ./tmp/course.json
      - echo $STUDENT_SERVICE_DB_SETTINGS > ./tmp/student.json

      - echo Creating EKS credential...
      - aws eks --region $AWS_REGION update-kubeconfig --name $K8S_CLUSTER_NAME
      - echo check config
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc

      - echo Removing old secrets...
      - kubectl -n $K8S_NAMESPACE delete secret course-db-settings course-app-settings --ignore-not-found
      - kubectl -n $K8S_NAMESPACE delete secret registration-db-settings registration-app-settings --ignore-not-found

      - echo Creating application secret in Kubernetes...
      - kubectl -n $K8S_NAMESPACE create secret generic course-app-settings --from-env-file=./tmp/course.env
      - kubectl -n $K8S_NAMESPACE create secret generic registration-app-settings --from-env-file=./tmp/student.env

      - echo Creating DB secret in Kubernetes...
      - kubectl -n $K8S_NAMESPACE create secret generic course-db-settings --from-file=./tmp/course.json
      - kubectl -n $K8S_NAMESPACE create secret generic registration-db-settings --from-file=./tmp/student.json

      - echo Build completed on `date`
      
      - echo "Deploying Course Service..."
      - kubectl apply -f k8s/api/course-deployment.yml
      - kubectl rollout restart deployment/course-deployment -n $K8S_NAMESPACE

      - echo "Deploying Registration Service..."
      - kubectl apply -f k8s/api/registration-deployment.yml
      - kubectl rollout restart deployment/registration-deployment -n $K8S_NAMESPACE

      - echo "Checking pod status..."
      - kubectl get pods -n $K8S_NAMESPACE

      - echo "Kubernetes deployment completed on `date`"
